// backend/server.js

const express = require('express');
const mysql = require('serverless-mysql');
const session = require('express-session');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');

const app = express();
const port = process.env.PORT || 3000;

// Database configuration (using environment variables)
const db = mysql({
  config: {
    host: process.env.DB_HOST,
    user: process.env.DB_USERNAME,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE   

  }
});

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true   
 }));

// Session setup (replace with a proper session store for production)
app.use(session({
  secret: 'your_secret_key', // Replace with a strong secret key
  resave: false,
  saveUninitialized: true
}));

// Authentication middleware (example)
const authenticateJWT = (req, res, next) => {
  const token = req.cookies.token;

  if (token) {
    jwt.verify(token, process.env.JWT_SECRET_KEY, (err, user) => {
      if (err) {
        return res.status(403).json({ message: 'Invalid token' });
      }
      req.user = user;
      next();
    });
  } else   
 {
    res.status(401).json({ message: 'Authorization   
 token missing' });
  }
};

// API Routes

// Authentication
app.post('/api/auth/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    const results = await db.query('SELECT * FROM clients WHERE username = ?', [username]);

    if (results.length > 0 && password_verify(password, results[0].password)) {
      // Generate JWT
      const token = jwt.sign({ userId: results[0].id }, process.env.JWT_SECRET_KEY, { expiresIn: '1h' });

      // Set cookie with JWT (HTTP-only)
      res.cookie('token', token, { httpOnly: true });

      // Generate auth key
      const authKey = crypto.randomBytes(32).toString('hex');

      // Store auth key and IP address
      const ip_address = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
      await db.query('INSERT INTO authorized_ips (client_id, ip_address, auth_key) VALUES (?, ?, ?)', [results[0].id, ip_address, authKey]);

      res.json({ message: 'Login successful', authKey }); // Send authKey in response
    } else {
      res.status(401).json({ message: 'Invalid credentials' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'An error occurred' });
  } finally   
 {
    await db.end();
  }
});

app.post('/api/auth/register', async (req, res) => {
  // ... (implementation for user registration) ...
});

app.post('/api/auth/logout', (req, res) => {
  res.clearCookie('token');
  res.json({ message: 'Logout successful' });
});

// User
app.get('/api/users/profile', authenticateJWT, async (req, res) => {
  try {
    const userId = req.user.userId; // Get userId from JWT payload
    const results = await db.query('SELECT * FROM clients WHERE id = ?', [userId]);
    if (results.length > 0) {
      res.json(results[0]);
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'An error occurred'   
 });
  } finally {
    await db.end();
  }
});

// ... (other API routes for chat, feed, wallet, etc.) ...

// Start the server
app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
Use code with caution.

Explanation

Dependencies: Imports necessary modules (express, serverless-mysql, express-session, jsonwebtoken, crypto).
Database connection: Establishes a connection to the MySQL database using environment variables for credentials.
Middleware: Sets up middleware for parsing JSON and URL-encoded request bodies, and for session management.
Authentication middleware (authenticateJWT): Verifies JWTs on protected routes.
API routes: Defines API routes for authentication (/api/auth/login, /api/auth/register, /api/auth/logout), user profile (/api/users/profile), and other functionalities (chat, feed, wallet).
Error handling: Includes basic error handling using try...catch blocks.
Server start: Starts the Express server on the specified port.
Key points

Secure credentials: Uses environment variables to store sensitive database credentials.
JWT authentication: Implements JWT-based authentication for secure API access.
Session management: Uses express-session for session management (remember to replace the in-memory store with a proper session store for production).
API endpoints: Provides API endpoints for various functionalities, including authentication, user profile retrieval, and other platform-specific actions.
Additional notes

Remember to implement the remaining API routes for chat, feed, wallet, etc.
Add robust error handling and input validation to your API routes.
Consider using a separate configuration file or a dedicated module to manage your API routes and controllers.
Deploy your backend on a suitable platform like Heroku or AWS, and configure the necessary environment variables.

Sources and related content
