JavaScript
// utils/dbConnect.js (or in your server.js file)

const mysql = require('serverless-mysql')({
  config: {
    host: process.env.DB_HOST,
    user: process.env.DB_USERNAME,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE,   
  

  }
});

// (Optional) Function to establish a database connection
async function connectToDatabase() {
  try {
    await mysql.connect();
    console.log('Connected to MySQL database');
    return mysql; // Return the connection object
  } catch (error) {
    console.error('Error connecting to database:', error);
    throw error; // Re-throw the error to be handled by the calling function
  }
}

// Export the connection object or the connectToDatabase function
module.exports = { connectToDatabase, mysql }; // Or just 'mysql' if you're not using a separate function
Use code with caution.

Explanation

serverless-mysql: This library is used to connect to your MySQL database in a serverless environment like Vercel.
Environment variables: The database credentials (host, username, password, database name) are retrieved from environment variables. This is crucial for security, as it prevents your credentials from being exposed in your code.
connectToDatabase function (optional): This function establishes a connection to the database and returns the connection object. You can use this function in your API routes to connect to the database when needed.
How to use

Store credentials: Store your database credentials as environment variables in your Vercel project settings (or in a .env.local file for local development).
Import and use: In your API routes, import the mysql object or the connectToDatabase function from dbConnect.js and use it to interact with your database.
Example usage in an API route

JavaScript
// api/users.js

const { mysql } = require('../utils/dbConnect'); // Import the connection object

app.get('/api/users/profile', authenticateJWT, async (req, res) => {
  try {
    const userId = req.user.userId;
    const results = await mysql.query('SELECT * FROM clients WHERE id = ?', [userId]);
    // ... process and send the response ...
  } catch (error) {
    // ... error handling ...
  } finally {
    await mysql.end(); // End the connection
  }
});
Use code with caution.

Important notes

Security: Never hardcode your database credentials in your code. Always use environment variables to store them securely.
Connection pooling: For production environments, consider using connection pooling to improve performance. The serverless-mysql library handles this automatically to some extent, but you might need to configure it further based on your needs.
Error handling: Implement proper error handling to catch and handle potential database connection errors.
Connection closing: In a serverless environment, it's important to close the database connection after each API request using await mysql.end(). This releases the connection back to the pool and prevents connection leaks.
